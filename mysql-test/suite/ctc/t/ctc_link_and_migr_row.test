#### test case come from cantian codebase gs_row_chain.sql, only part of it pick up to here
#### remember if table column is too long or column size to big, to pick new case from gs_row_chain.sql
#### 链接行：
####      1、当行数据大于PCRH_MAX_ROW_SIZE:8050(pcrh表)或者HEAP_MAX_ROW_SIZE:8040(堆表)，插入时会产生链接行
####      2、更新数据时，如果行数据变大达到条件1的情况，也会产生链接行
#### 行迁移：
####      1、当更新行数据时，新增的行数据大小ua->inc_size > 0 && ua->inc_size > page->free_size + itl->fsc时，产生行迁移

--disable_warnings
DROP TABLE IF EXISTS ROW_CHAIN_TABLE;
--enable_warnings

set autocommit = 0;
CREATE TABLE ROW_CHAIN_TABLE(ID INT,A VARCHAR(8000),B VARCHAR(8000),C VARCHAR(8000),D VARCHAR(8000)) ENGINE=CTC DEFAULT CHARSET=ascii;
COMMIT;

--echo ######## UNDO_HEAP_UPDATE_FULL_COLUMNS WITHOUT PRIMAYR KEY INDEX
--echo ######## test case 1, UPDATE_INPLACE(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(1,LPAD('A',8000,'A'),LPAD('B',8000,'B'),LPAD('C',8000,'C'),'D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=1;
UPDATE ROW_CHAIN_TABLE SET ID=1,A=LPAD('U',8000,'U'),B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W'),D='X' WHERE ID=1;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=1;
COMMIT;

--echo ######## test case 2, UPDATE_INPAGE(CHAIN->CHAIN)
UPDATE ROW_CHAIN_TABLE SET ID=2,A=LPAD('U',3000,'U'),B=LPAD('V',2000,'V'),C=LPAD('W',3000,'W'),D='X' WHERE ID=1;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=2;
COMMIT;

--echo ######## test case 3, UPDATE_MIGR(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(3,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=3;
UPDATE ROW_CHAIN_TABLE SET ID=3,A=LPAD('U',8000,'U'),B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W'),D=LPAD('X',8000,'X') WHERE ID=3;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=3;
COMMIT;

--echo ######## test case 4, UPDATE_MIGR(NORMAL->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(4,'A','B','C','D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=4;
UPDATE ROW_CHAIN_TABLE SET ID=4,A=LPAD('U',8000,'U'),B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W'),D=LPAD('X',8000,'X') WHERE ID=4;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=4;
COMMIT;

--echo ######## test case 5, UPDATE_MIGR(CHAIN->NORMAL)
INSERT INTO ROW_CHAIN_TABLE VALUES(5,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=5;
UPDATE ROW_CHAIN_TABLE SET ID=5,A='A',B='B',C='C',D='D' WHERE ID=5;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=5;
COMMIT;

SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=1;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=2;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=3;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=4;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=5;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
COMMIT;

--echo ######## UNDO_HEAP_UPDATE_PART_COLUMNS WITHOUT PRIMAYR KEY INDEX
--echo ######## test case 6, UPDATE_INPLACE(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(6,LPAD('A',8000,'A'),LPAD('B',3000,'B'),LPAD('C',8000,'C'),'D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=6;
UPDATE ROW_CHAIN_TABLE SET ID=6,A=LPAD('U',8000,'U'),C=LPAD('W',8000,'W'),D='X' WHERE ID=6;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=6;
COMMIT;

--echo ######## test case 7, UPDATE_INPAGE(CHAIN->CHAIN)
UPDATE ROW_CHAIN_TABLE SET ID=7,A=LPAD('U',3000,'U'),B=LPAD('V',2000,'V'),D='X' WHERE ID=6;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=7;
COMMIT;

--echo ######## test case 8, UPDATE_MIGR(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(8,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=8;
UPDATE ROW_CHAIN_TABLE SET ID=8,B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W') WHERE ID=8;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=8;
COMMIT;

--echo ######## test case 9, UPDATE_MIGR(NORMAL->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(9,'A','B','C','D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=9;
UPDATE ROW_CHAIN_TABLE SET ID=9,B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W') WHERE ID=9;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=9;
COMMIT;

--echo ######## test case 10, UPDATE_MIGR(CHAIN->NORMAL)
INSERT INTO ROW_CHAIN_TABLE VALUES(10,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=10;
UPDATE ROW_CHAIN_TABLE SET ID=10,A='A',B='B',C='C',D='D' WHERE ID=10;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=10;
COMMIT;

SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=6;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=7;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=8;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=9;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=10;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
COMMIT;

--echo ######## test case 11, ADD COLUMN WITHOUT PRIMAYR KEY INDEX
INSERT INTO ROW_CHAIN_TABLE VALUES(11,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
ALTER TABLE ROW_CHAIN_TABLE ADD COLUMN E VARCHAR(8000);
UPDATE ROW_CHAIN_TABLE SET E=LPAD('E',8000,'E') WHERE ID=11;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID > 10;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=11;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
COMMIT;

DROP TABLE ROW_CHAIN_TABLE;
COMMIT;



CREATE TABLE ROW_CHAIN_TABLE(ID INT PRIMARY KEY,A VARCHAR(8000),B VARCHAR(8000),C VARCHAR(8000),D VARCHAR(8000)) ENGINE=CTC DEFAULT CHARSET=ascii;
COMMIT;

--echo ######## UNDO_HEAP_UPDATE_FULL_COLUMNS WITH PRIMAYR KEY INDEX
--echo ######## test case 1, UPDATE_INPLACE(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(1,LPAD('A',8000,'A'),LPAD('B',8000,'B'),LPAD('C',8000,'C'),'D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=1;
UPDATE ROW_CHAIN_TABLE SET ID=1,A=LPAD('U',8000,'U'),B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W'),D='X' WHERE ID=1;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=1;
COMMIT;

--echo ######## test case 2, UPDATE_INPAGE(CHAIN->CHAIN)
UPDATE ROW_CHAIN_TABLE SET ID=2,A=LPAD('U',3000,'U'),B=LPAD('V',2000,'V'),C=LPAD('W',3000,'W'),D='X' WHERE ID=1;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=2;
COMMIT;

--echo ######## test case 3, UPDATE_MIGR(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(3,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=3;
UPDATE ROW_CHAIN_TABLE SET ID=3,A=LPAD('U',8000,'U'),B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W'),D=LPAD('X',8000,'X') WHERE ID=3;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=3;
COMMIT;

--echo ######## test case 4, UPDATE_MIGR(NORMAL->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(4,'A','B','C','D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=4;
UPDATE ROW_CHAIN_TABLE SET ID=4,A=LPAD('U',8000,'U'),B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W'),D=LPAD('X',8000,'X') WHERE ID=4;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=4;
COMMIT;

--echo ######## test case 5, UPDATE_MIGR(NORMAL->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(5,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=5;
UPDATE ROW_CHAIN_TABLE SET ID=5,A='A',B='B',C='C',D='D' WHERE ID=5;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=5;
COMMIT;

SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=1;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=2;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=3;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=4;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=5;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
COMMIT;

--echo ######## UNDO_HEAP_UPDATE_PART_COLUMNS WITH PRIMAYR KEY INDEX
--echo ######## test case 6, UPDATE_INPLACE(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(6,LPAD('A',8000,'A'),LPAD('B',3000,'B'),LPAD('C',8000,'C'),'D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=6;
UPDATE ROW_CHAIN_TABLE SET ID=6,A=LPAD('U',8000,'U'),C=LPAD('W',8000,'W'),D='X' WHERE ID=6;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=6;
COMMIT;

--echo ######## test case 7, UPDATE_INPAGE(CHAIN->CHAIN)
UPDATE ROW_CHAIN_TABLE SET ID=7,A=LPAD('U',3000,'U'),B=LPAD('V',2000,'V'),D='X' WHERE ID=6;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=7;
COMMIT;

--echo ######## test case 8, UPDATE_MIGR(CHAIN->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(8,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=8;
UPDATE ROW_CHAIN_TABLE SET ID=8,B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W') WHERE ID=8;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=8;
COMMIT;

--echo ######## test case 9, UPDATE_MIGR(NORMAL->CHAIN)
INSERT INTO ROW_CHAIN_TABLE VALUES(9,'A','B','C','D');
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=9;
UPDATE ROW_CHAIN_TABLE SET ID=9,B=LPAD('V',8000,'V'),C=LPAD('W',8000,'W') WHERE ID=9;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=9;
COMMIT;

--echo ######## test case 10, UPDATE_MIGR(CHAIN->NORMAL)
INSERT INTO ROW_CHAIN_TABLE VALUES(10,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=10;
UPDATE ROW_CHAIN_TABLE SET ID=10,A='A',B='B',C='C',D='D' WHERE ID=10;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID=10;
COMMIT;

SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=6;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=7;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=8;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=9;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=10;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
COMMIT;

--echo ######## test case 11, ADD COLUMN WITH PRIMAYR KEY INDEX
INSERT INTO ROW_CHAIN_TABLE VALUES(11,LPAD('A',8000,'A'),'B','C',LPAD('D',8000,'D'));
ALTER TABLE ROW_CHAIN_TABLE ADD COLUMN E VARCHAR(8000);
UPDATE ROW_CHAIN_TABLE SET E=LPAD('E',8000,'E') WHERE ID=11;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID > 8;
DELETE FROM ROW_CHAIN_TABLE WHERE ID=11;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT COUNT(*) FROM ROW_CHAIN_TABLE;
COMMIT;

DROP TABLE ROW_CHAIN_TABLE;
COMMIT;

--echo ######## LINK AND MIGR ROW OTHER CASES
--echo ######## test case 1: COLUMN > 12 WITHOUT PRIMARY KEY
CREATE TABLE ROW_CHAIN_TABLE(
ID INT,
C_SERIAL INT,
C_DOUBLE INT,
C_FLOAT FLOAT,
C_INT INT,
C_INTEGER INTEGER, C_BIGINT INT, C_REAL REAL, C_NUMERIC INT, C_NUMERIC_PARM INT, C_NUMBER INT,  C_NUMBER_PARM INT, C_DECIMAL DECIMAL, C_DECIMAL_PARM DECIMAL(5,2), C_BOOL CHAR(1),
C_CLOB VARCHAR(20), C_BLOB VARCHAR(20),
C_CHAR CHAR, C_CHAR1 CHAR(1), C_CHAR20 CHAR(20), C_CHAR4000 CHAR(255),
C_VARCHAR VARCHAR(4000), C_VARCHAR1 VARCHAR(1), C_VARCHAR20 VARCHAR(20), C_VARCHAR4000 VARCHAR(4000),
C_VARCHAR2 VARCHAR(20), C_VARCHAR21 VARCHAR(1), C_VARCHAR220 VARCHAR(20), C_VARCHAR24000 VARCHAR(4000),
C_RAW VARCHAR(20), C_RAW1 VARCHAR(1), C_RAW20 VARCHAR(20), C_RAW4000 VARCHAR(4000),
C_BINARY VARCHAR(20), C_BINARY1 VARCHAR(1), C_BINARY20 VARCHAR(20), C_BINARY4000 VARCHAR(4000),
C_VARBINARY VARCHAR(20), C_VARBINARY1 VARCHAR(1), C_VARBINARY20 VARCHAR(20), C_VARBINARY4000 VARCHAR(4000),
C_DATE DATE, C_DATETIME DATE,
C_TIMESTAMP TIMESTAMP, C_TIMESTAMP3 TIMESTAMP(3), C_TIMESTAMP6 TIMESTAMP(6),
C_TIMESTAMP_WTZ TIMESTAMP, C_TIMESTAMP_WTZ3 TIMESTAMP(3), C_TIMESTAMP_WTZ6 TIMESTAMP(6),
C_INTERVAL VARCHAR(20),
C_BYTEA VARCHAR(20)
) ENGINE=CTC DEFAULT CHARSET=ascii;
INSERT INTO ROW_CHAIN_TABLE VALUES( 12, -1727922176, 1494155264, 1.1, -1644429312, 733741056, 1650917376, -1717305344, -1141374976, 1827471360, -357040128, -1113063424, 7.7, 8.8, 'W', 'MTVYCNFQDRSKGB', 'IMTVYC', 'B', 'N', 'BIMTVYCNFQ', LPAD('EBIMTVYCNF',255,'EBIMTVYCNF'), LPAD('EBIMTVYCNF',4000,'EBIMTVYCNF'), 'P', 'LUEBIMTV', LPAD('EBIMTVYCNF',2000,'EBIMTVYCNF'),
'SDLUEBIMTVYCN', 'K', 'TSDL', LPAD('EBIMTVYCNF',3000,'EBIMTVYCNF'),'ZZTSDLUEBIMTVYCNFQD', 'K', 'BZZTS', LPAD('EBIMTVYCNF',3000,'EBIMTVYCNF'), 'Z', 'D', 'XZFBZ', LPAD('EBIMTVYCNF',4000,'EBIMTVYCNF'), 'A', 'I', 'MAJXZFBZZTSDLUEBIMTV', LPAD('EBIMTVYCNF',4000,'EBIMTVYCNF'),NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'MD', 'FMDMAJXZFB' );
SELECT * FROM ROW_CHAIN_TABLE;
UPDATE ROW_CHAIN_TABLE SET ID=12,C_CHAR4000='A',C_BINARY4000='B' WHERE ID=12;
SELECT * FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT * FROM ROW_CHAIN_TABLE;
COMMIT;
DROP TABLE ROW_CHAIN_TABLE;
COMMIT;

--echo ######## test case 2: COLUMN > 12 WITH PRIMARY KEY
CREATE TABLE ROW_CHAIN_TABLE(
ID INT PRIMARY KEY,
C_SERIAL INT,
C_DOUBLE INT,
C_FLOAT FLOAT,
C_INT INT,
C_INTEGER INTEGER, C_BIGINT INT, C_REAL REAL, C_NUMERIC INT, C_NUMERIC_PARM INT, C_NUMBER INT,  C_NUMBER_PARM INT, C_DECIMAL DECIMAL, C_DECIMAL_PARM DECIMAL(5,2), C_BOOL CHAR(1),
C_CLOB VARCHAR(20), C_BLOB VARCHAR(20),
C_CHAR CHAR, C_CHAR1 CHAR(1), C_CHAR20 CHAR(20), C_CHAR4000 CHAR(255),
C_VARCHAR VARCHAR(4000), C_VARCHAR1 VARCHAR(1), C_VARCHAR20 VARCHAR(20), C_VARCHAR4000 VARCHAR(4000),
C_VARCHAR2 VARCHAR(20), C_VARCHAR21 VARCHAR(1), C_VARCHAR220 VARCHAR(20), C_VARCHAR24000 VARCHAR(4000),
C_RAW VARCHAR(20), C_RAW1 VARCHAR(1), C_RAW20 VARCHAR(20), C_RAW4000 VARCHAR(4000),
C_BINARY VARCHAR(20), C_BINARY1 VARCHAR(1), C_BINARY20 VARCHAR(20), C_BINARY4000 VARCHAR(4000),
C_VARBINARY VARCHAR(20), C_VARBINARY1 VARCHAR(1), C_VARBINARY20 VARCHAR(20), C_VARBINARY4000 VARCHAR(4000),
C_DATE DATE, C_DATETIME DATE,
C_TIMESTAMP TIMESTAMP, C_TIMESTAMP3 TIMESTAMP(3), C_TIMESTAMP6 TIMESTAMP(6),
C_TIMESTAMP_WTZ TIMESTAMP, C_TIMESTAMP_WTZ3 TIMESTAMP(3), C_TIMESTAMP_WTZ6 TIMESTAMP(6),
C_INTERVAL VARCHAR(20),
C_BYTEA VARCHAR(20)
) ENGINE=CTC DEFAULT CHARSET=ascii;
INSERT INTO ROW_CHAIN_TABLE VALUES( 12, -1727922176, 1494155264, 1.1, -1644429312, 733741056, 1650917376, -1717305344, -1141374976, 1827471360, -357040128, -1113063424, 7.7, 8.8, 'W', 'MTVYCNFQDRSKGB', 'IMTVYC', 'B', 'N', 'BIMTVYCNFQ', LPAD('EBIMTVYCNF',255,'EBIMTVYCNF'), LPAD('EBIMTVYCNF',4000,'EBIMTVYCNF'), 'P', 'LUEBIMTV', LPAD('EBIMTVYCNF',2000,'EBIMTVYCNF'),
'SDLUEBIMTVYCN', 'K', 'TSDL', LPAD('EBIMTVYCNF',3000,'EBIMTVYCNF'),'ZZTSDLUEBIMTVYCNFQD', 'K', 'BZZTS', LPAD('EBIMTVYCNF',3000,'EBIMTVYCNF'), 'Z', 'D', 'XZFBZ', LPAD('EBIMTVYCNF',4000,'EBIMTVYCNF'), 'A', 'I', 'MAJXZFBZZTSDLUEBIMTV', LPAD('EBIMTVYCNF',4000,'EBIMTVYCNF'),NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'MD', 'FMDMAJXZFB' );
SELECT * FROM ROW_CHAIN_TABLE;
UPDATE ROW_CHAIN_TABLE SET ID=12,C_CHAR4000='A',C_BINARY4000='B' WHERE ID=12;
SELECT * FROM ROW_CHAIN_TABLE;
ROLLBACK;
SELECT * FROM ROW_CHAIN_TABLE;
COMMIT;
DROP TABLE ROW_CHAIN_TABLE;
COMMIT;

--echo ######## test case 3: create index
CREATE TABLE ROW_CHAIN_TABLE(ID INT, C1 VARCHAR(4000), C2 VARCHAR(4000), C3 VARCHAR(4000), C4 VARCHAR(4000), C5 VARCHAR(4000), C6 VARCHAR(4000), C7 VARCHAR(4000), C8 VARCHAR(3000)) ENGINE=CTC DEFAULT CHARSET=ascii;
CREATE INDEX IX_RC ON ROW_CHAIN_TABLE(ID);
INSERT INTO ROW_CHAIN_TABLE VALUES(1, LPAD('X', 2000, 'X'), LPAD('X', 2000, 'X'),LPAD('X', 2000, 'X'),LPAD('X', 2000, 'X'),LPAD('X', 2000, 'X'),LPAD('X', 2000, 'X'),LPAD('X', 2000, 'X'),LPAD('X', 2000, 'X'));
COMMIT;
UPDATE ROW_CHAIN_TABLE SET ID = 100, C1=LPAD('X', 2000, 'X'), C2=LPAD('Y', 3000, 'Y'), C3=LPAD('Z', 2000,'Z');
COMMIT;
SELECT * FROM ROW_CHAIN_TABLE WHERE ID = 100;
COMMIT;
DROP TABLE ROW_CHAIN_TABLE;
COMMIT;

--echo ######## test case 4: UPDATE ROW FOR MATCH MIGR ROW CONDITION WITHOUT INDEX
CREATE TABLE ROW_MIGR_TABLE(ID INT,A INT,B VARCHAR(8000)) ENGINE=CTC DEFAULT CHARSET=ascii;
INSERT INTO ROW_MIGR_TABLE VALUES(1, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(2, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(3, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(4, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(5, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(6, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(7, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(8, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(9, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(10, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(11, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(12, 1, NULL);
COMMIT;
UPDATE ROW_MIGR_TABLE SET B=LPAD('M',7840,'M') WHERE ID=1;  # DONT CHANGE THE COLUMN SIZE
SELECT * FROM ROW_MIGR_TABLE WHERE ID=1;
COMMIT;
DROP TABLE ROW_MIGR_TABLE;
COMMIT;

--echo ######## test case 5: UPDATE ROW FOR MATCH MIGR ROW CONDITION WITH INDEX
CREATE TABLE ROW_MIGR_TABLE(ID INT PRIMARY KEY,A INT,B VARCHAR(8000)) ENGINE=CTC DEFAULT CHARSET=ascii;
INSERT INTO ROW_MIGR_TABLE VALUES(1, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(2, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(3, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(4, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(5, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(6, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(7, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(8, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(9, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(10, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(11, 1, NULL);
INSERT INTO ROW_MIGR_TABLE VALUES(12, 1, NULL);
COMMIT;
UPDATE ROW_MIGR_TABLE SET B=LPAD('M',7840,'M') WHERE ID=1;  # DONT CHANGE THE COLUMN SIZE
SELECT * FROM ROW_MIGR_TABLE WHERE ID=1;
COMMIT;
DROP TABLE ROW_MIGR_TABLE;
COMMIT;

set autocommit = 1;
