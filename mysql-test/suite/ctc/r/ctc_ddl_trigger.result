drop table if exists DEMO;
drop table if exists DEMO_TRIGGER_LOG;
create table DEMO (ID integer not null, NAME varchar(20), AGE integer, GRADE real);
create table DEMO_TRIGGER_LOG (ACTION varchar(20), NAME varchar(20));
create TRIGGER TRIGGER_CTC1 AFTER INSERT ON DEMO FOR EACH ROW
BEGIN
IF NEW.AGE <= 0 THEN
INSERT INTO DEMO_TRIGGER_LOG VALUES('insert', NEW.NAME);
END IF;
END|
create TRIGGER TRIGGER_CTC2 BEFORE UPDATE ON DEMO FOR EACH ROW
BEGIN
IF NEW.AGE < 0 THEN
SET NEW.AGE = 0;
ELSEIF new.AGE > 100 THEN
SET new.AGE = 100;
END IF;
INSERT INTO DEMO_TRIGGER_LOG VALUES('update', NEW.NAME);
END|
create TRIGGER TRIGGER_CTC3 AFTER DELETE ON DEMO FOR EACH ROW
BEGIN
IF old.AGE > 0 THEN
INSERT INTO DEMO_TRIGGER_LOG VALUES('delete', old.NAME);
END IF;
END|
SHOW TRIGGERS;
Trigger	Event	Table	Statement	Timing	Created	sql_mode	Definer	character_set_client	collation_connection	Database Collation
TRIGGER_CTC1	INSERT	DEMO	BEGIN
IF NEW.AGE <= 0 THEN
INSERT INTO DEMO_TRIGGER_LOG VALUES('insert', NEW.NAME);
END IF;
END	AFTER	#	ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION	root@localhost	utf8mb4	utf8mb4_0900_ai_ci	utf8mb4_0900_ai_ci
TRIGGER_CTC2	UPDATE	DEMO	BEGIN
IF NEW.AGE < 0 THEN
SET NEW.AGE = 0;
ELSEIF new.AGE > 100 THEN
SET new.AGE = 100;
END IF;
INSERT INTO DEMO_TRIGGER_LOG VALUES('update', NEW.NAME);
END	BEFORE	#	ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION	root@localhost	utf8mb4	utf8mb4_0900_ai_ci	utf8mb4_0900_ai_ci
TRIGGER_CTC3	DELETE	DEMO	BEGIN
IF old.AGE > 0 THEN
INSERT INTO DEMO_TRIGGER_LOG VALUES('delete', old.NAME);
END IF;
END	AFTER	#	ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION	root@localhost	utf8mb4	utf8mb4_0900_ai_ci	utf8mb4_0900_ai_ci
insert into DEMO values (1, 'LIOR', -1, 6.9);
insert into DEMO values (4, 'MIKE', 55, 99.92);
insert into DEMO values (8, 'ROMAN', 40, 94.1);
insert into DEMO values (16, 'DAN', 60, 1234567890);
insert into DEMO values (32, 'ZVI', 35, 777.666);
select * from DEMO;
ID	NAME	AGE	GRADE
1	LIOR	-1	6.9
4	MIKE	55	99.92
8	ROMAN	40	94.1
16	DAN	60	1234567890
32	ZVI	35	777.666
select * from DEMO_TRIGGER_LOG;
ACTION	NAME
insert	LIOR
UPDATE DEMO SET AGE=200 where ID=4;
UPDATE DEMO SET AGE=-50 where ID=8;
select * from DEMO;
ID	NAME	AGE	GRADE
1	LIOR	-1	6.9
4	MIKE	100	99.92
8	ROMAN	0	94.1
16	DAN	60	1234567890
32	ZVI	35	777.666
select * from DEMO_TRIGGER_LOG;
ACTION	NAME
insert	LIOR
update	MIKE
update	ROMAN
DELETE FROM DEMO WHERE ID=1;
DELETE FROM DEMO WHERE ID=16;
select * from DEMO;
ID	NAME	AGE	GRADE
4	MIKE	100	99.92
8	ROMAN	0	94.1
32	ZVI	35	777.666
select * from DEMO_TRIGGER_LOG;
ACTION	NAME
insert	LIOR
update	MIKE
update	ROMAN
delete	DAN
SHOW TRIGGERS;
Trigger	Event	Table	Statement	Timing	Created	sql_mode	Definer	character_set_client	collation_connection	Database Collation
TRIGGER_CTC1	INSERT	DEMO	BEGIN
IF NEW.AGE <= 0 THEN
INSERT INTO DEMO_TRIGGER_LOG VALUES('insert', NEW.NAME);
END IF;
END	AFTER	#	ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION	root@localhost	utf8mb4	utf8mb4_0900_ai_ci	utf8mb4_0900_ai_ci
TRIGGER_CTC2	UPDATE	DEMO	BEGIN
IF NEW.AGE < 0 THEN
SET NEW.AGE = 0;
ELSEIF new.AGE > 100 THEN
SET new.AGE = 100;
END IF;
INSERT INTO DEMO_TRIGGER_LOG VALUES('update', NEW.NAME);
END	BEFORE	#	ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION	root@localhost	utf8mb4	utf8mb4_0900_ai_ci	utf8mb4_0900_ai_ci
TRIGGER_CTC3	DELETE	DEMO	BEGIN
IF old.AGE > 0 THEN
INSERT INTO DEMO_TRIGGER_LOG VALUES('delete', old.NAME);
END IF;
END	AFTER	#	ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION	root@localhost	utf8mb4	utf8mb4_0900_ai_ci	utf8mb4_0900_ai_ci
DROP TRIGGER TRIGGER_CTC;
ERROR HY000: Trigger does not exist
DROP TRIGGER IF EXISTS TRIGGER_CTC;
Warnings:
Note	1360	Trigger does not exist
DROP TRIGGER IF EXISTS TRIGGER_CTC1;
DROP TRIGGER IF EXISTS TRIGGER_CTC2;
DROP TRIGGER IF EXISTS TRIGGER_CTC3;
SHOW TRIGGERS;
Trigger	Event	Table	Statement	Timing	Created	sql_mode	Definer	character_set_client	collation_connection	Database Collation
drop table DEMO;
drop table DEMO_TRIGGER_LOG;
